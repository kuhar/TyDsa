.symbol_type reg
.symbol_type heap
.symbol_type type
.number_type num

// -- inputs --
.decl alloca(t:type, r:reg, h:heap)
.decl malloc(t:type, r:reg, n:num, h:heap)
.decl load(res_ty:type, r:reg, from_ty:type, from:reg)
.decl store(val_ty:type, val:reg, dest_ty:type, dest:reg)
.decl bitcast(to_ty:type, r:reg, val_ty:type, val:reg)
.decl gep(t:type, r:reg, src_ty:type, src:reg, idx:num)
.decl phi(t:type, r:reg, src_a:reg, src_b:reg)

// True iff ptr_ty is src_ty*
.decl ptrOf(src_ty:type, ptr_ty:type)
// True iff elem_ty* is ptr_ty
.decl elemOf(ptr_ty:type, elem_ty:type)
elemOf(PtrT, T) :- ptrOf(T, PtrT).
.decl isPtrTy(t:type)
isPtrTy(T) :- elemOf(T, _).

.decl sizeOf(ty:type, sz:num)
sizeOf(PtrT, 8) :- isPtrTy(PtrT).

.decl class(name:type, num_fields:num)
.decl field(class:type, ty:type, index:num)

#include "_current_test.dl"

// -- debug info and helpers --

// [Debug] Track all used registers.
.decl register(r:reg, t:type)
register(R, T) :- alloca(T, R, _).
register(R, T) :- malloc(T, R, _, _).
register(R, T) :- load(T, R, _, _).
register(ValR, ValT),
register(DestR, DestT) :- store(ValT, ValR, DestT, DestR).
register(R, T) :- bitcast(T, R, _,  _).
register(R, T) :- gep(T, R, _, _, _).
register(R, T) :- phi(T, R, _, _).
//.output register()

// [Debug] track all heap objects.
.decl heap_obj(h:heap, size:num)
heap_obj(H, N) :- alloca(PtrT, _, H), elemOf(PtrT, T), sizeOf(T, N).
heap_obj(H, N) :- malloc(_, _, N, H).
.output heap_obj()

// [Debug] Display all known types grouped by element type.
.decl ty_hierarchy(t0:type, t1:type, t2:type)
ty_hierarchy(T0, T1, T2) :- ptrOf(T0, T1), ptrOf(T1, T2), elemOf(T2, T1), elemOf(T1, T0).
//.output ty_hierarchy()

// -- analysis --

.decl sizeOfClass_n(name:type, n:num, acc_sz:num)
sizeOfClass_n(C, 0, Sz) :- class(C, _), field(C, FldTy, 0), sizeOf(FldTy, Sz).
sizeOfClass_n(C, K, AccSz + Sz) :- sizeOfClass_n(C, K - 1, AccSz),
                                   field(C, FldTy, K), sizeOf(FldTy, Sz).
sizeOf(C, Sz) :- class(C, N), sizeOfClass_n(C, N - 1, Sz).  

.decl typeAtOffset(class_ty:type, ty:type, offset:num)
typeAtOffset(T, T, 0) :- sizeOf(T, _).  
typeAtOffset(C, T, N - SzT) :- sizeOfClass_n(C, K, N),
                               field(C, T, K), sizeOf(T, SzT).
typeAtOffset(C, InnT, N + M) :- typeAtOffset(C, T, N),
                                typeAtOffset(T, InnT, M).

.decl isPrimitive(T:type)
isPrimitive(T) :- sizeOf(T, _), !class(T, _).

.decl innerPrimitiveTy(ty:type, inner_ty:type)
innerPrimitiveTy(T, InnT) :- typeAtOffset(T, InnT, _), 
                             isPrimitive(InnT).

.decl firstPrimitiveTy(ty:type, fty:type)
firstPrimitiveTy(T, T) :- isPrimitive(T), !isPtrTy(T).
firstPrimitiveTy(T, PrimInnT) :- !isPrimitive(T), !isPtrTy(T),
                                 typeAtOffset(T, InnT, 0),
                                 firstPrimitiveTy(InnT, PrimInnT).

firstPrimitiveTy(PtrT, PrimPtrT) :- elemOf(PtrT, T), !isPtrTy(T),
                                    firstPrimitiveTy(T, PrimT),
                                    ptrOf(PrimT, PrimPtrT).

firstPrimitiveTy(PtrPtrT, PrimPtrPtrT) :- elemOf(PtrPtrT, PtrT),
                                          firstPrimitiveTy(PtrT, PrimPtrT),
                                          ptrOf(PrimPtrT, PrimPtrPtrT).
.output firstPrimitiveTy()

//.decl heapTypes(h:heap, tys:type_list)
//.output heapTypes()

.decl heapField(h:heap, fld_ty:type)
heapField(H, FldTy) :- RegPtsTo(_, H, FldTy).

.decl allocFn(r:reg, h:heap)
allocFn(R, H) :- alloca(_T, R, H).
allocFn(R, H) :- malloc(_T, R, _N, H).

.decl memAccess(ptrT:type, r:reg)
memAccess(T, R) :- load(T, _, _PtrT, R).
memAccess(T, ValR) :- store(ValT, ValR, _, _), elemOf(ValT, T).
memAccess(ValT, SrcR) :- store(ValT, _, _SrcT, SrcR).

// Register comes from a pointer register, ignoring bitcasts and geps by 0.
.decl RegOrigin(r:reg, origin:reg)

// Register points to a field of a given type in a given heap.
.decl RegPtsTo(r:reg, h:heap, ty:type)

// A field of a given type points to another field in a given heap,
// of a given type. source field type is type*. 
.decl FldPtsTo(h1:heap, t1:type, h2:heap, t2:type)

.decl HeapPtsTo(h1:heap, h2:heap)
HeapPtsTo(H1, H2) :- FldPtsTo(H1, _, H2, _).

// Given heap is type-collapsed.
//.decl tCollapsed(h:heap)

RegOrigin(R, R) :- alloca(_, R, _).
RegOrigin(R, R) :- malloc(_, R, _, _).
RegOrigin(R, R) :- load(T, R, _, _), isPtrTy(T).
RegOrigin(R, R) :- gep(_, R, _, _SrcR, N), N != 0.
RegOrigin(R, SrcR) :- gep(_, R, _, SrcR, 0).
RegOrigin(R, SrcR1),
RegOrigin(R, SrcR2) :- phi(T, R, R1, R2), isPtrTy(T),
                       RegOrigin(R1, SrcR1),
                       RegOrigin(R2, SrcR2).
RegOrigin(R, Src) :- bitcast(_, R, _, R2), RegOrigin(R2, Src).


.decl knownAllocSite(r:reg, h:heap)
knownAllocSite(R, H) :- allocFn(R, H).
knownAllocSite(R, H) :- RegPtsTo(R, H, _).

RegPtsTo(R, H, T) :- RegPtsTo(SrcR, H, T), RegOrigin(R, SrcR).
RegPtsTo(R, H, T) :- allocFn(R, H), RegPtsTo(_, H, T).
RegPtsTo(R, H, T) :- RegPtsTo(_, H, "i8"),
                     RegPtsTo(_, H, T),
                     RegPtsTo(R, H, _).

                   
RegPtsTo(AccR, H, PrimT) :- memAccess(T, AccR), RegOrigin(AccR, R),
                            firstPrimitiveTy(T, PrimT),
                            knownAllocSite(R, H).

RegPtsTo(FldR, H, PrimFldTy) :- 
                          gep(FldPtrT, FldR, SrcTy, SrcR, N), N != 0,
                          elemOf(FldPtrT, FldTy), 
                          firstPrimitiveTy(FldTy, PrimFldTy),
                          RegOrigin(SrcR, OrigR),
                          knownAllocSite(OrigR, H).

RegPtsTo(LdR, H2, PrimPtrT) :- 
                          load(PtrT, LdR, _, SrcR), isPtrTy(PtrT),
                          firstPrimitiveTy(PtrT, PrimPtrT),
                          knownAllocSite(SrcR, H1),
                          FldPtsTo(H1, _, H2, _).

FldPtsTo(H1, PrimDstPtrTy, H2, PrimValPtrTy) :- 
                          store(ValPtrTy, Val, DstPtrTy, Dst),
                          firstPrimitiveTy(ValPtrTy, PrimValPtrTy),
                          firstPrimitiveTy(DstPtrTy, PrimDstPtrTy),
                          knownAllocSite(Val, H2),
                          knownAllocSite(Dst, H1).


.decl OffRegPtsTo(r:reg, h:heap, off:num)
.decl OffFldPtsTo(h1:heap, off1:num, h2:heap, off2:num)

OffRegPtsTo(R, H, 0) :- allocFn(R, H).
OffRegPtsTo(R, H, Off) :- bitcast(_, R, _, SrcR),
                          OffRegPtsTo(SrcR, H, Off).
OffRegPtsTo(R, H, Off2 - FSz) :- gep(FldPtrTy, R, StrPtrTy, SrcR, N),
                                 OffRegPtsTo(SrcR, H, Off),
                                 elemOf(FldPtrTy, FldTy),
                                 elemOf(StrPtrTy, StrTy),
                                 sizeOfClass_n(StrTy, N, Off2),
                                 sizeOf(FldTy, FSz).

OffRegPtsTo(R, H2, Off2) :- load(PtrT, R, _, SrcR),
                            OffRegPtsTo(SrcR, H1, Off), 
                            OffFldPtsTo(H1, Off, H2, Off2).
OffRegPtsTo(R, H2, Off2) :- phi(_, R, R1, R2),
                            OffRegPtsTo(R1, H1, Off1),
                            OffRegPtsTo(R2, H2, Off2).

OffFldPtsTo(H1, O1, H2, O2) :- store(_, ValR, _, DestR),
                               OffRegPtsTo(ValR, H2, O2),
                               OffRegPtsTo(SrcR, H1, O1).

.output OffRegPtsTo()
.output OffFldPtsTo()


// [Debug] Dump tables.
//.output sizeOf()
//.output field()
//.output sizeOfClass_n()
//.output typeAtOffset()
.output heapField()
.output RegOrigin() 
.output RegPtsTo()
.output memAccess()
.output FldPtsTo()
.output HeapPtsTo()
