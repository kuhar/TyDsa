// Andersen, language w/ fields

.decl alloca(t:type, r:reg, h:heap)
.decl load(res_ty:type, r:reg, from_ty:type, from:reg)
.decl store(val_ty:type, val:reg, dest_ty:type, dest:reg)
.decl phi(t:type, r:reg, src_a:reg, src_b:reg)
.decl gep(t:type, r:reg, src_r:reg, f:field)

.decl RegPtsTo(r:reg, h:heap)
.decl RegPtsToFld(r:reg, h:heap, f:field)
.decl FldPtsToObj(h_src:heap, f_src:field, h_dst:heap)

// RegPtsTo(R, H) :- RegPtsToField(R, H, _).

RegPtsTo(R, H) :- alloca(_, R, H).

RegPtsTo(R, H) :- phi(T, R, Src1, Src2), RegPtsTo(Src1, H).
RegPtsTo(R, H) :- phi(T, R, Src1, Src2), RegPtsTo(Src2, H).

RegPtsToFld(R, H, F) :- gep(_, R, SrcR, F), RegPtsTo(SrcR, H).
// + Phis (Assignment)
RegPtsTo(R, H2) :- load(T, R, SrcT, SrcR), RegPtsFld(SrcR, H, F),
                   FldPtsToObj(H, F, H2), isPtrTy(T).

FldPtsToObj(H2, F, H) :- store(PtrTy, Ptr, DstTy, DstR), isPtrTy(PtrTy),
                         RegPtsToFld(Ptr, H, F), RegPtsTo(DstR, H2).

