// Andersen, language w/ types and no offsets

// Assumption: in concrete semantics, a write that overlaps many fields is not allowed
// Alternative assumption: overlapping write doesn't create new legal pointers
// Restriction: load of a pointer must read from a properly typed memory

.decl alloca(t:type, r:reg, h:heap)
.decl load(res_ty:type, r:reg, from_ty:type, from:reg)

.decl store(val_ty:type, val:reg, dest_ty:type, dest:reg)
.decl assign(t:type, r:reg, src_a:reg)
.decl gep(t:type, r:reg, src_r:reg, f:field)

.decl RegPtsToObj(r:reg, h:heap)
.decl RegPtsToFld(r:reg, h:heap, f:field)
.decl ObjPtsToObj(h_src:heap, h_dst:heap)
.decl FldPtsToObj(h_src:heap, f_src:field, h_dst:heap)
.decl ObjPtsToFld(h_src:heap, h_dst:heap, f_dst:field)
.decl FldPtsToFld(h_src:heap, f_src:field, h_dst:heap, f_dst:field)

RegPtsToObj(R, H) :- alloca(_, R, H).
RegPtsToObj(R, H) :- assign(_, R, SrcR), RegPtsToObj(Src, H).

RegPtsToFld(R, H, T) :- assign(_, R, Src), RegPtsToFld(Src, H, T).
RegPtsToFld(R, H, T) :- gep(T, R, SrcR, _), RegPtsToObj(SrcR, H).

ObjPtsToObj(H2, H1) :- store(PtrTy, Ptr, DstTy, DstR), isPtrTy(PtrTy),
                       RegPtsToObj(Ptr, H1), RegPtsToObj(DstR, H2).

FldPtsToObj(H2, T2, H1) :- store(PtrTy, Ptr, DstTy, DstR), isPtrTy(PtrTy),
                           RegPtsToObj(Ptr, H1), RegPtsToFld(DstR, H2, T2).

ObjPtsToFld(H2, H1, T1) :- store(PtrTy, Ptr, DstTy, DstR), isPtrTy(PtrTy),
                           RegPtsToFld(Ptr, H1, T1), RegPtsToObj(DstR, H2).

FldPtsToFld(H2, T2, H1, T1) :- store(PtrTy, Ptr, DstTy, DstR), isPtrTy(PtrTy),
                               RegPtsToFld(Ptr, H1, T1), RegPtsToFld(DstR, H2, T2).

RegPtsToObj(SrcR, H2) :- load(T, R, SrcT, SrcR), RegPtsObj(SrcR, H),
                            ObjPtsToObj(H, H2), isPtrTy(T).

RegPtsToFld(SrcR, H2, T2) :- load(T, R, SrcT, SrcR), RegPtsObj(SrcR, H),
                             ObjPtsToFld(H, H2, T2), isPtrTy(T).

RegPtsToObj(SrcR, H2) :- load(T, R, SrcT, SrcR), RegPtsFld(SrcR, H, T1),
                         FldPtsToObj(H, T1, H2), isPtrTy(T).

RegPtsToFld(SrcR, H2, T2) :- load(T, R, SrcT, SrcR), RegPtsFld(SrcR, H, T1),
                             FldPtsToFldj(H, T1, H2, T2), isPtrTy(T).